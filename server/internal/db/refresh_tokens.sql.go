// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one

INSERT INTO refresh_tokens (refresh_token, expires_at, user_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, refresh_token, expires_at, user_id, deleted_at
`

type CreateRefreshTokenParams struct {
	RefreshToken string           `json:"refreshToken"`
	ExpiresAt    pgtype.Timestamp `json:"expiresAt"`
	UserID       int32            `json:"userId"`
}

// Таблица refresh_tokens
// Создание refresh-токена
func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken, arg.RefreshToken, arg.ExpiresAt, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.UserID,
		&i.DeletedAt,
	)
	return i, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE
FROM refresh_tokens
WHERE id = $1
`

// Полное удаление refresh-токена
func (q *Queries) DeleteRefreshToken(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, id)
	return err
}

const getRefreshTokenByID = `-- name: GetRefreshTokenByID :one
SELECT id, created_at, updated_at, refresh_token, expires_at, user_id, deleted_at
FROM refresh_tokens
WHERE id = $1
`

// Получение refresh-токена по ID
func (q *Queries) GetRefreshTokenByID(ctx context.Context, id int64) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByID, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.UserID,
		&i.DeletedAt,
	)
	return i, err
}

const listRefreshTokensByUser = `-- name: ListRefreshTokensByUser :many
SELECT id, created_at, updated_at, refresh_token, expires_at, user_id, deleted_at
FROM refresh_tokens
WHERE user_id = $1
order by created_at desc
`

// Получение всех refresh-токенов пользователя
func (q *Queries) ListRefreshTokensByUser(ctx context.Context, userID int32) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, listRefreshTokensByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefreshToken,
			&i.ExpiresAt,
			&i.UserID,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteRefreshToken = `-- name: SoftDeleteRefreshToken :exec
UPDATE refresh_tokens
SET deleted_at = now(),
    updated_at = now()
WHERE id = $1
`

// Удаление refresh-токена (мягкое удаление)
func (q *Queries) SoftDeleteRefreshToken(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteRefreshToken, id)
	return err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE refresh_tokens
SET refresh_token = $2,
    expires_at    = $3,
    updated_at    = now()
WHERE id = $1
`

type UpdateRefreshTokenParams struct {
	ID           int64            `json:"id"`
	RefreshToken string           `json:"refreshToken"`
	ExpiresAt    pgtype.Timestamp `json:"expiresAt"`
}

// Обновление refresh-токена
func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateRefreshToken, arg.ID, arg.RefreshToken, arg.ExpiresAt)
	return err
}
