// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CategoriesPlanPeriodEnum string

const (
	CategoriesPlanPeriodEnumDay     CategoriesPlanPeriodEnum = "day"
	CategoriesPlanPeriodEnumWeek    CategoriesPlanPeriodEnum = "week"
	CategoriesPlanPeriodEnumMonth   CategoriesPlanPeriodEnum = "month"
	CategoriesPlanPeriodEnumQuarter CategoriesPlanPeriodEnum = "quarter"
	CategoriesPlanPeriodEnumYear    CategoriesPlanPeriodEnum = "year"
)

func (e *CategoriesPlanPeriodEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CategoriesPlanPeriodEnum(s)
	case string:
		*e = CategoriesPlanPeriodEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CategoriesPlanPeriodEnum: %T", src)
	}
	return nil
}

type NullCategoriesPlanPeriodEnum struct {
	CategoriesPlanPeriodEnum CategoriesPlanPeriodEnum `json:"categoriesPlanPeriodEnum"`
	Valid                    bool                     `json:"valid"` // Valid is true if CategoriesPlanPeriodEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCategoriesPlanPeriodEnum) Scan(value interface{}) error {
	if value == nil {
		ns.CategoriesPlanPeriodEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CategoriesPlanPeriodEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCategoriesPlanPeriodEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CategoriesPlanPeriodEnum), nil
}

type CategoriesTypeEnum string

const (
	CategoriesTypeEnumInc        CategoriesTypeEnum = "inc"
	CategoriesTypeEnumCost       CategoriesTypeEnum = "cost"
	CategoriesTypeEnumAdjustment CategoriesTypeEnum = "adjustment"
)

func (e *CategoriesTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CategoriesTypeEnum(s)
	case string:
		*e = CategoriesTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CategoriesTypeEnum: %T", src)
	}
	return nil
}

type NullCategoriesTypeEnum struct {
	CategoriesTypeEnum CategoriesTypeEnum `json:"categoriesTypeEnum"`
	Valid              bool               `json:"valid"` // Valid is true if CategoriesTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCategoriesTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.CategoriesTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CategoriesTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCategoriesTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CategoriesTypeEnum), nil
}

type Category struct {
	ID         int64                    `json:"id"`
	CreatedAt  pgtype.Timestamp         `json:"createdAt"`
	UpdatedAt  pgtype.Timestamp         `json:"updatedAt"`
	Name       string                   `json:"name"`
	Type       CategoriesTypeEnum       `json:"type"`
	Order      int32                    `json:"order"`
	Comment    string                   `json:"comment"`
	UserID     int32                    `json:"userId"`
	DeletedAt  pgtype.Timestamp         `json:"deletedAt"`
	Icon       string                   `json:"icon"`
	Plan       pgtype.Numeric           `json:"plan"`
	Color      string                   `json:"color"`
	PlanPeriod CategoriesPlanPeriodEnum `json:"planPeriod"`
}

type Record struct {
	ID         int64            `json:"id"`
	CreatedAt  pgtype.Timestamp `json:"createdAt"`
	UpdatedAt  pgtype.Timestamp `json:"updatedAt"`
	Amount     pgtype.Numeric   `json:"amount"`
	Comment    string           `json:"comment"`
	Timestamp  pgtype.Timestamp `json:"timestamp"`
	CategoryID int64            `json:"categoryId"`
	DeletedAt  pgtype.Timestamp `json:"deletedAt"`
}

type RefreshToken struct {
	ID           int64            `json:"id"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
	UpdatedAt    pgtype.Timestamp `json:"updatedAt"`
	RefreshToken string           `json:"refreshToken"`
	ExpiresAt    pgtype.Timestamp `json:"expiresAt"`
	UserID       int32            `json:"userId"`
	DeletedAt    pgtype.Timestamp `json:"deletedAt"`
}

type User struct {
	ID        int32            `json:"id"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	Password  string           `json:"password"`
	DeletedAt pgtype.Timestamp `json:"deletedAt"`
}
